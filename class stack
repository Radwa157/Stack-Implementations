class Stack {
  private int array[];
  private int top;
  private int capacity;

 
  Stack(int size) {
    array = new int[size];
    capacity = size;
    top = -1;
  }

 
  public void push(int x) {
    if (isFull()) {
      System.out.println("OverFlow\nProgram Terminated\n");
      System.exit(1);
    }

    System.out.println("Inserting " + x);
    array[++top] = x;
  }

 
  public int pop() {
    if (isEmpty()) {
      System.out.println("STACK EMPTY");
      System.exit(1);
    }
    return array[top--];
  }

  
  public int size() {
    return top + 1;
    
    public int pop()
	{
		
		if (isEmpty())
		{
			System.out.println("Underflow\nProgram Terminated");
			System.exit(-1);
		}

		System.out.println("Removing " + peek());

		// decrease stack size by 1 and (optionally) return the popped element
		return arr[top--];
	}

	// Utility function to return the top element of the stack
	public int peek()
	{
		if (!isEmpty()) {
			return arr[top];
		}
		else {
			System.exit(-1);
		}

		return -1;
	}

	
	public int size() {
		return top + 1;
	}


	public boolean isEmpty() {
		return top == -1;   		
	}


	public boolean isFull() {
		return top == capacity - 1; 	
	}
}

class Main
{
	public static void main (String[] args)
	{
		Stack stack = new Stack(3);

		stack.push(1);  	
		stack.push(2);  	

		stack.pop();		
		stack.pop();		

		stack.push(3);  

		System.out.println("The top element is " + stack.peek());
		System.out.println("The stack size is " + stack.size());

		stack.pop();	

	
		if (stack.isEmpty()) {
			System.out.println("The stack is empty");
		}
		else {
			System.out.println("The stack is not empty");
		}
	}
}
    
  }

  // Check if the stack is empty
  public Boolean isEmpty() {
    return top == -1;
  }

  // Check if the stack is full
  public Boolean isFull() {
    return top == capacity - 1;
  }

  public void printStack() {
    for (int i = 0; i <= top; i++) {
      System.out.println(array[i]);
    }
  }

  public static void main(String[] args) {
    Stack stack = new Stack(5);

    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);

    stack.pop();
    System.out.println("\nAfter popping out");

    stack.printStack();

  }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Stack
{
	private int arr[];
	private int top;
	private int capacity;

	
	Stack(int size)
	{
		arr = new int[size];
		capacity = size;
		top = -1;
	}

	
	public void push(int x)
	{
		if (isFull())
		{
			System.out.println("Overflow\nProgram Terminated\n");
			System.exit(-1);
		}

		System.out.println("Inserting " + x);
		arr[++top] = x;
	}


